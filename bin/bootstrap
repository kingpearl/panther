#!/usr/bin/env bash
##
# Pearl Bootstrap
# Copyright(c) 2012 King Pearl LLC
##
mkdir -p /var/tmp && cd /var/tmp/

ME=$(whoami)
PKG=profile
if [ ! -f .installed-$PKG ];
then
sudo locale-gen en_US.UTF-8
touch .installed-$PKG
fi

# Set preferences
# PKG=preferences
# if [ ! -f .installed-$PKG ];
# then
# echo "Set preferences"
# ~/.macOS && touch .installed-$PKG
# fi

echo "Apt update"
sudo apt update

PKG=universe
if [ ! -f .installed-$PKG ];
then
echo "Add apt repository Universe"
sudo add-apt-repository $PKG && touch .installed-$PKG
sudo apt update
fi

PKG=curl
if [ ! -f .installed-$PKG ];
then
echo "Apt install Curl"
sudo apt install -y $PKG && touch .installed-$PKG
fi

PKG=git
if [ ! -f .installed-$PKG ];
then
echo "Apt install Git"
sudo apt install -y $PKG && touch .installed-$PKG
fi

# Set permissions
PKG=permissions
if [ ! -f .installed-$PKG ];
then
echo "Set $PKG"
sudo chmod g+rwx /usr/local/{.,bin,etc,include,lib,sbin,share,src,share/man}
sudo chgrp $ME /usr/local/{.,bin,etc,include,lib,sbin,share,src,share/man}
chmod 700 ~/.ssh
chmod 600 ~/.ssh/*
touch .installed-$PKG
fi

# Create workspace
PKG=workspace
if [ ! -f .installed-$PKG ];
then
echo "Create $PKG"
mkdir -p ~/.vim/{backups,bundle,swaps,undo}
mkdir -p ~/Projects
touch .installed-$PKG
fi

echo "Apt upgrade"
sudo apt upgrade -y

# PKG=xanmod
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install XanMod"
# sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
# curl -fssl https://dl.xanmod.org/gpg.key | sudo apt-key add -
# sudo add-apt-repository "deb [arch=amd64] http://deb.xanmod.org releases main"
# sudo apt update
# sudo apt install -y linux-$PKG
# touch .installed-$PKG
# fi

# PKG=mesa
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install Mesa drivers"
# sudo add-apt-repository -y ppa:kisak/kisak-mesa
# sudo apt update
# touch .installed-$PKG
# fi

# PKG=nvidia
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install NVIDIA drivers"
# sudo add-apt-repository -y ppa:graphics-drivers/ppa
# sudo apt update
# touch .installed-$PKG
# fi

PKG=make-gcc-ssl
if [ ! -f .installed-$PKG ];
then
echo "Apt install Make & GCC & SSL"
sudo apt install -y build-essential libssl-dev && touch .installed-$PKG
fi

# PKG=exfat
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install exFat"
# sudo apt install -y exfat-fuse exfat-utils && touch .installed-$PKG
# fi

PKG=libarchive-tools
if [ ! -f .installed-$PKG ];
then
echo "Apt install Tar"
sudo apt install -y $PKG && touch .installed-$PKG
fi

# PKG=openjdk-8-jdk
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install OpenJDK"
# sudo apt install -y $PKG && touch .installed-$PKG
# fi

# PKG=winehq
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install WineHQ"
# curl -fsSL https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add -
# sudo add-apt-repository "deb https://dl.winehq.org/wine-builds/ubuntu/ eoan main"
# sudo apt update
# sudo apt install -y --install-recommends winehq-stable winetricks && touch .installed-$PKG
# fi

PKG=htop
if [ ! -f .installed-$PKG ];
then
echo "Apt install Htop"
sudo apt install -y $PKG && touch .installed-$PKG
fi

# PKG=mutt
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install Mutt"
# sudo apt install -y $PKG && touch .installed-$PKG
# fi

# PKG=lynx
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install Lynx"
# sudo apt install -y $PKG && touch .installed-$PKG
# fi

# PKG=newsboat
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install Newsboat"
# sudo apt install -y $PKG && touch .installed-$PKG
# fi

# PKG=openvpn
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install OpenVPN"
# sudo apt install -y $PKG network-manager-$PKG network-manager-openvpn-gnome && touch .installed-$PKG
# fi

PKG=openconnect
if [ ! -f .installed-$PKG ];
then
echo "Apt install OpenConnect"
sudo apt install -y $PKG network-manager-$PKG network-manager-openconnect-gnome && touch .installed-$PKG
fi

# PKG=stoken
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install stoken"
# sudo apt install -y $PKG && touch .installed-$PKG
# fi

# PKG=aspell
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install Aspell"
# sudo apt install -y $PKG && touch .installed-$PKG
# fi

# PKG=silversearcher-ag
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install The Silver Searcher"
# sudo apt install -y $PKG && touch .installed-$PKG
# fi

# PKG=git-extras
# if [ ! -f .installed-$PKG ];
# then
# echo "Install $PKG"
# mkdir -p $PKG && curl -sL https://github.com/visionmedia/$PKG/archive/master.tar.gz | tar -xz --strip 1 -C $PKG && cd $PKG && make install && cd ../ && rm -fR $PKG && touch .installed-$PKG
# fi

PKG=git-flow
if [ ! -f .installed-$PKG ];
then
echo "Apt install Git Flow"
sudo apt install -y $PKG && touch .installed-$PKG
fi

VER=v14.15.5
PKG=node-$VER-linux-x64
if [ ! -f .installed-$PKG ];
then
echo "Install Node"
mkdir -p node && curl -sL https://nodejs.org/dist/$VER/$PKG.tar.gz | tar -xz --strip 1 -C node && cd node && cp -R {bin,lib,share} /usr/local/ && cd ../ && rm -fR node && touch .installed-$PKG
fi

# echo "Update NPM"
npm install -g npm

# PKG=js-beautify
# if [ ! -f .installed-$PKG ];
# then
# echo "NPM install JS Beautify"
# npm install -g $PKG && touch .installed-$PKG
# fi

# PKG=tern
# if [ ! -f .installed-$PKG ];
# then
# echo "NPM install Tern"
# npm install -g $PKG && touch .installed-$PKG
# fi

# PKG=create-react-app
# if [ ! -f .installed-$PKG ];
# then
# echo "NPM install Create React App"
# npm install -g $PKG && touch .installed-$PKG
# fi

# PKG=create-react-native-app
# if [ ! -f .installed-$PKG ];
# then
# echo "NPM install Create React Native App"
# npm install -g $PKG && touch .installed-$PKG
# fi

# PKG=react-native-cli
# if [ ! -f .installed-$PKG ];
# then
# echo "NPM install React Native CLI"
# npm install -g $PKG && touch .installed-$PKG
# fi

# PKG=react-vr-cli
# if [ ! -f .installed-$PKG ];
# then
# echo "NPM install React VR CLI"
# npm install -g $PKG && touch .installed-$PKG
# fi

# PKG=cordova
# if [ ! -f .installed-$PKG ];
# then
# echo "NPM install Cordova"
# npm install -g $PKG && touch .installed-$PKG
# npm install -g ios-sim ios-deploy
# fi

# PKG=ionic
# if [ ! -f .installed-$PKG ];
# then
# echo "NPM install Ionic"
# npm install -g $PKG && touch .installed-$PKG
# fi

# PKG=now
# if [ ! -f .installed-$PKG ];
# then
# echo "NPM install Now"
# npm install -g $PKG && touch .installed-$PKG
# fi

# PKG=typescript
# if [ ! -f .installed-$PKG ];
# then
# echo "NPM install TypeScript"
# npm install -g $PKG && touch .installed-$PKG
# fi

# PKG=particle-cli
# if [ ! -f .installed-$PKG ];
# then
# echo "NPM install Particle"
# npm install -g $PKG && touch .installed-$PKG
# fi

# PKG=arc-theme
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install Arc Theme"
# sudo apt install -y $PKG && touch .installed-$PKG
# fi

PKG=papirus-icon-theme
if [ ! -f .installed-$PKG ];
then
echo "Apt install Papirus Icon Theme"
sudo add-apt-repository -y ppa:papirus/papirus
sudo apt update
sudo apt install -y $PKG && touch .installed-$PKG
fi

PKG=gnome-shell-extensions
if [ ! -f .installed-$PKG ];
then
echo "Apt install Gnome Shell Extensions"
sudo apt install -y $PKG && touch .installed-$PKG
fi

PKG=gnome-tweaks
if [ ! -f .installed-$PKG ];
then
echo "Apt install Gnome Tweaks"
sudo apt install -y $PKG && touch .installed-$PKG
fi

# PKG=flatpak
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install Flatpak"
# sudo apt install -y $PKG && sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo && touch .installed-$PKG
# fi

PKG=slack
if [ ! -f .installed-$PKG ];
then
echo "Flatpak install Slack"
flatpak install -y flathub com.slack.Slack && touch .installed-$PKG
fi

# PKG=evolution
# if [ ! -f .installed-$PKG ];
# then
# echo "Flatpak install Evolution"
# flatpak install -y flathub org.gnome.Evolution && touch .installed-$PKG
# fi

# PKG=microsoft-teams
# if [ ! -f .installed-$PKG ];
# then
# echo "Flatpak install Microsoft Teams"
# flatpak install -y flathub com.microsoft.Teams && touch .installed-$PKG
# fi

# PKG=skype
# if [ ! -f .installed-$PKG ];
# then
# echo "Flatpak install Skype"
# flatpak install -y flathub com.skype.Client && touch .installed-$PKG
# fi

# PKG=zoom
# if [ ! -f .installed-$PKG ];
# then
# echo "Flatpak install Zoom"
# flatpak install -y flathub us.zoom.Zoom && touch .installed-$PKG
# fi

# PKG=gimp
# if [ ! -f .installed-$PKG ];
# then
# echo "Flatpak install Gimp"
# flatpak install -y flathub flathub org.gimp.GIMP && touch .installed-$PKG
# fi

# PKG=darktable
# if [ ! -f .installed-$PKG ];
# then
# echo "Flatpak install Slack"
# flatpak install -y flathub org.darktable.Darktable && touch .installed-$PKG
# fi

# PKG=spotify
# if [ ! -f .installed-$PKG ];
# then
# echo "Flatpak install Spotify"
# flatpak install -y flathub com.spotify.Client && touch .installed-$PKG
# fi

# PKG=steam
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install Steam"
# sudo apt install -y $PKG-devices $PKG-installer && touch .installed-$PKG
# fi

# PKG=lutris
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install Lutris"
# sudo add-apt-repository ppa:lutris-team/lutris
# sudo apt update
# sudo apt install -y $PKG && touch .installed-$PKG
# fi

PKG=google-chrome-stable
if [ ! -f .installed-$PKG ];
then
echo "Apt install Google Chrome"
sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
sudo apt update
sudo apt install -y $PKG && touch .installed-$PKG
fi

# VER=v4.9.0
# PKG=watchman
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install Watchman"
# sudo apt install -y autoconf automake && curl -sL https://github.com/facebook/$PKG/archive/$ver.tar.gz | tar -xz --strip 1 -C $PKG && cd $PKG && ./autogen.sh && ./configure && make && sudo make install && cd ../ && rm -fR $PKG && touch .installed-$PKG
# fi

PKG=docker
if [ ! -f .installed-$PKG ];
then
echo "Apt install Docker"
sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
sudo apt update
sudo apt install -y $PKG-ce $PKG-ce-cli containerd.io && sudo usermod -aG docker $USER && touch .installed-$PKG
fi

# PKG=virtualbox
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install VirtualBox"
# sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
# curl -fssl https://www.virtualbox.org/download/oracle_vbox_2016.asc | sudo apt-key add -
# curl -fssl https://www.virtualbox.org/download/oracle_vbox.asc | sudo apt-key add -
# sudo add-apt-repository "deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian $(lsb_release -cs) contrib"
# sudo apt update
# sudo apt install -y $PKG-6.1 && sudo usermod -aG vboxusers $USER && touch .installed-$PKG
# curl -sO https://download.virtualbox.org/virtualbox/6.1.18/Oracle_VM_VirtualBox_Extension_Pack-6.1.18.vbox-extpack
# fi

PKG=kvm
if [ ! -f .installed-$PKG ];
then
echo "Apt install KVM"
sudo apt install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virt-manager && sudo usermod -aG libvirt $USER && sudo usermod -a -G libvirt-qemu $USER && touch .installed-$PKG
fi

PKG=vagrant
if [ ! -f .installed-$PKG ];
then
echo "Apt install Vagrant"
sudo apt install -y $PKG && touch .installed-$PKG
# vagrant plugin install vagrant-kvm
fi

PKG=terraform
if [ ! -f .installed-$PKG ];
then
echo "Install Terraform"
curl -sL https://releases.hashicorp.com/terraform/0.14.7/terraform_0.14.7_linux_amd64.zip | bsdtar -xf - -C ./ && chmod +x $PKG && mv $PKG /usr/local/bin/ && touch .installed-$PKG
fi

# PKG=up
# if [ ! -f .installed-$PKG ];
# then
# echo "Install Apex"
# curl https://raw.githubusercontent.com/apex/up/master/install.sh | bash
# touch .installed-$PKG
# fi

# PKG=android-studio
# if [ ! -f .installed-$PKG ];
# then
# echo "Flatpak install Android Studio"
# flatpak install -y flathub com.google.AndroidStudio && touch .installed-$PKG
# fi

PKG=vim
if [ ! -f .installed-$PKG ];
then
echo "Apt install Vim"
sudo apt install -y $PKG && touch .installed-$PKG
fi

PKG=vundle
if [ ! -f .installed-$PKG ];
then
echo "Install Vundle"
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
vim +PluginInstall +qall
echo "colorscheme base16-spacemacs" >> ~/.vimrc
touch .installed-$PKG
fi

# PKG=emacs
# if [ ! -f .installed-$PKG ];
# then
# echo "Flatpak install Emacs"
# flatpak install -y flathub org.gnu.emacs && touch .installed-$PKG
# fi

# PKG=spacemacs
# if [ ! -f .installed-$PKG ];
# then
# echo "Install Spacemacs"
# git clone https://github.com/syl20bnr/$PKG ~/.emacs.d
# touch .installed-$PKG
# fi

PKG=visual-studio-code
if [ ! -f .installed-$PKG ];
then
echo "Flatpak install Visual Studio Code"
flatpak install -y flathub com.visualstudio.code && touch .installed-$PKG
fi

PKG=postman
if [ ! -f .installed-$PKG ];
then
echo "Flatpak install Postman"
flatpak install -y flathub com.getpostman.Postman && touch .installed-$PKG
fi

# PKG=sencha
# if [ ! -f .installed-$PKG ];
# then
# echo "Install Sencha CMD"
# curl -sL http://cdn.sencha.com/cmd/7.3.1.27/no-jre/SenchaCmd-7.3.1.27-linux-amd64.sh.zip | bsdtar -xf - -C ./  && ./SenchaCmd-7.3.1.27-linux-amd64.sh && rm ./SenchaCmd-7.3.1.27-linux-amd64.sh && touch .installed-$PKG
# fi

# PKG=zsh
# if [ ! -f .installed-$PKG ];
# then
# echo "Apt install Zsh"
# sudo apt install -y $PKG && sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" && touch .installed-$PKG
# fi
